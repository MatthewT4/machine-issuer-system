openapi: 3.0.3
info:
  title: Title
  description: Title
  version: 1.0.0
servers:
  - url: 'https'
tags:
  - name: User
    description: Операции с пользователями
  - name: Product
    description: Операции с продуктами

paths:
  /auth/signup:
    post:
      operationId: SignUp
      summary: User registration
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                username:
                  type: string
                password:
                  type: string
      responses:
        200:
          description: successful sign up
        500:
          description: internal error

  /auth/signin:
    post:
      operationId: SignIn
      summary: User login
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        200:
          description: successful sign in
        500:
          description: internal error

  /auth/signout:
    get:
      operationId: SignOut
      summary: User logout
      responses:
        200:
          description: successful sign out
        500:
          description: internal error

#  /users/{user_id}:
#    get:
#      description: Get user
#      operationId: GetUser
#      tags:
#        - User
#      parameters:
#        - name: user_id
#          in: path
#          required: true
#          schema:
#            type: string
#            format: uuid
#      responses:
#        200:
#          description: Return user
#          content:
#            application/json:
#              schema:
#                type: array
#                items:
#                  $ref: "#/components/schemas/User"
  /servers/{server_id}:
    get:
      operationId: GetServer
      parameters:
        - name: server_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Return server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Server"

  /servers/available:
    get:
      operationId: GetAvailableServers
      responses:
        200:
          description: Return servers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Server"

  /servers/my:
    get:
      operationId: GetMyServers
      responses:
        200:
          description: Return rent servers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Server"
  /rent/{server_id}:
    post:
      operationId: RentServer
      parameters:
        - name: server_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                booking_days:
                  type: integer
      responses:
        200:
          description: Return user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Server"
        400:
          description: Server is rent already
        404:
          description: Server not found
    delete:
      operationId: UnRentServer
      parameters:
        - name: server_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Return user
        400:
          description: server not rent
        404:
          description: Server not found

  /metrics/{server_id}:
    get:
      operationId: GetServerMetrics
      parameters:
        - name: server_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Return metrics of server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Metric"
        404:
          description: Server not found
        500:
          description: Internal server error

  /reboot/{server_id}:
    get:
      operationId: Reboot server
      parameters:
        - name: server_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Successfully reboot
        404:
          description: Server not found
        500:
          description: Internal server error

  /roles/is_admin:
    get:
      operationId: IsAdmin
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  is_admin:
                    type: boolean
        500:
          description: internal server error

#  /vmusers/add/{server_id}:
#    get:
#      operationId: Create user on vm
#      parameters:
#        - name: server_id
#          in: path
#          required: true
#          schema:
#            type: string
#            format: uuid
#      responses:
#        200:
#          description: Successfully create user role
#        404:
#          description: Server not found
#        500:
#          description: Internal server error

components:
  schemas:
    Server:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        cpu:
          type: integer
          description: core
        memory:
          type: integer
          description: MB
        disk:
          type: integer
          description: MB
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
    Metric:
      type: object
      properties:
        uptime:
          type: integer
        cpu:
          type: string
        ram:
          type: string
        mem:
          type: integer
    VMLogin:
      type: object
      properties:
        ip:
          type: string
        login:
          type: string
        password:
          type: string